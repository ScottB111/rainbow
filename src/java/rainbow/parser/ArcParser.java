/* Generated By:JavaCC: Do not edit this line. ArcParser.java */
package rainbow.parser;

import java.util.LinkedList;
import java.util.List;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.FileNotFoundException;
import rainbow.*;
import rainbow.types.*;

public class ArcParser implements ArcParserConstants {

  public ArcParser(File source) throws FileNotFoundException {
    this(new FileInputStream(source));
  }

  public ArcParser(String expression) {
    this(new ByteArrayInputStream(expression.getBytes()));
  }

  public ArcParser(String sourceName, InputStream in) {
    this(in);
  }

  private static String stripQuotes(String s) {
    return s.substring(1, s.length() - 1);
  }

  final public ArcObject parseOneLine() throws ParseException {
                                ArcObject x;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FRACTION:
    case DOUBLE:
    case INTEGER:
    case IDENTIFIER:
    case STRING:
    case CHARACTER:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 39:
      x = expression();
                                {if (true) return x;}
      break;
    case 0:
      jj_consume_token(0);
                                {if (true) return null;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ArcObject expression() throws ParseException {
                                ArcObject o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
      o = list();
      break;
    case FRACTION:
    case DOUBLE:
    case INTEGER:
    case IDENTIFIER:
    case STRING:
    case CHARACTER:
      o = atom();
      break;
    case 33:
      o = quote();
      break;
    case 34:
      o = unQuote();
      break;
    case 35:
      o = unQuoteSplicing();
      break;
    case 36:
      o = quasiQuote();
      break;
    case 37:
      o = functionShortcut();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final public ArcObject quote() throws ParseException {
                                Token tok; ArcObject o;
    tok = jj_consume_token(33);
    o = expression();
                                {if (true) return Pair.buildFrom(Symbol.make("quote"), o);}
    throw new Error("Missing return statement in function");
  }

  final public ArcObject unQuote() throws ParseException {
                                Token tok; ArcObject o;
    tok = jj_consume_token(34);
    o = expression();
                                {if (true) return Pair.buildFrom(Symbol.make("unquote"), o);}
    throw new Error("Missing return statement in function");
  }

  final public ArcObject unQuoteSplicing() throws ParseException {
                                Token tok; ArcObject o;
    tok = jj_consume_token(35);
    o = expression();
                                {if (true) return Pair.buildFrom(Symbol.make("unquote-splicing"), o);}
    throw new Error("Missing return statement in function");
  }

  final public ArcObject quasiQuote() throws ParseException {
                                Token tok; ArcObject o;
    tok = jj_consume_token(36);
    o = expression();
                                {if (true) return Pair.buildFrom(Symbol.make("quasiquote"), o);}
    throw new Error("Missing return statement in function");
  }

  final public ArcObject functionShortcut() throws ParseException {
                                Token tok;
                                List list = new LinkedList();
                                List fn = new LinkedList();
                                fn.add(Symbol.make("fn"));
                                fn.add(Pair.buildFrom(Symbol.make("_")));
                                ArcObject o;
    tok = jj_consume_token(37);
    label_1:
    while (true) {
      o = expression();
                                list.add(o);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FRACTION:
      case DOUBLE:
      case INTEGER:
      case IDENTIFIER:
      case STRING:
      case CHARACTER:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 39:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(38);
                                fn.add(Pair.buildFrom(list));
                                {if (true) return Pair.buildFrom(fn);}
    throw new Error("Missing return statement in function");
  }

  final public ArcObject list() throws ParseException {
                                Token start;
                                ArcObject item;
                                ArcObject last = ArcObject.NIL;
                                List<ArcObject> list = new LinkedList();
    start = jj_consume_token(39);
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      item = expression();
                                list.add(item);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      last = expression();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(40);
                                if (list.size() > 0) {
                                  {if (true) return Pair.buildFrom(list, last);}
                                } else if (last != ArcObject.NIL) {
                                  generateParseException();
                                } else {
                                  {if (true) return new Pair();}
                                }
    throw new Error("Missing return statement in function");
  }

  final public ArcObject atom() throws ParseException {
                                Token s; ArcObject o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      s = jj_consume_token(INTEGER);
                                {if (true) return Rational.make(Long.parseLong(s.toString()), 1);}
      break;
    case DOUBLE:
      s = jj_consume_token(DOUBLE);
                                {if (true) return Real.parse(s.toString());}
      break;
    case FRACTION:
      s = jj_consume_token(FRACTION);
                                {if (true) return Rational.parse(s.toString());}
      break;
    case STRING:
      s = jj_consume_token(STRING);
                                {if (true) return ArcString.parse(stripQuotes(s.toString()));}
      break;
    case IDENTIFIER:
      s = jj_consume_token(IDENTIFIER);
                                {if (true) return Symbol.make(s.toString());}
      break;
    case CHARACTER:
      s = jj_consume_token(CHARACTER);
                                {if (true) return ArcCharacter.make(s.toString());}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_scan_token(35)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(34)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(33)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_scan_token(39)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(37)) return true;
    Token xsp;
    if (jj_3R_25()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(FRACTION)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(36)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  public ArcParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x904461,0x904460,0x904460,0x400000,0x904460,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0xbe,0xbe,0xbe,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public ArcParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public ArcParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ArcParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ArcParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ArcParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ArcParser(ArcParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ArcParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[41];
    for (int i = 0; i < 41; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
