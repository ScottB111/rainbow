options
{
    JAVA_UNICODE_ESCAPE=false;
    UNICODE_INPUT=true;
    LOOKAHEAD=1;
    STATIC=false;
}
PARSER_BEGIN(ArcParser)
package rainbow.parser;

import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.FileNotFoundException;
import rainbow.*;
import rainbow.types.*;

public class ArcParser {
  public ArcParser(String expression) {
    this(new ByteArrayInputStream(expression.getBytes()));
  }

  private static String cleanString(String s) {
    StringBuffer sb = new StringBuffer();
    boolean escaping = false;
    for (int i = 0; i < s.length(); i++) {
      char c = s.charAt(i);
      if (escaping) {
        escaping = false;
        switch (c) {
          case '#'  : sb.append("#"); break;
          case 'n'  : sb.append('\n'); break;
          case 't'  : sb.append('\t'); break;
          case 'r'  : sb.append('\r'); break;
          case '\\' : sb.append('\\'); break;
          case '"'  : sb.append('"');  break;
        }
      } else if (c == '\\') {
        escaping = true;
      } else {
        sb.append(c);
      }
    }
    return sb.toString();
  }
}
PARSER_END(ArcParser)
SKIP : { " " | "\r" | "\n" | "\t" }

TOKEN: /* rational */
{
    < FRACTION : <INTEGER> "/" <UNSIGNED_INTEGER> >
}

TOKEN:
{
    < COMPLEX : (<POS_INF>|<NEG_INF>|<NAN>|<DOUBLE>|<INTEGER>|<FRACTION>)? <SIGN> ((<UNSIGNED_INTEGER> ( "/" <UNSIGNED_INTEGER> )? | <UNSIGNED_DOUBLE>))? "i" >
}

TOKEN: /* double, integer */
{
    < DOUBLE            : (<SIGN>)? <UNSIGNED_DOUBLE>       >
|   < UNSIGNED_DOUBLE   : <DOUBLE1> | <DOUBLE2>             >
|   < #DOUBLE1          : <UNSIGNED_INTEGER> ["E","e"] <INTEGER> >
|   < #DOUBLE2          : (<UNSIGNED_INTEGER>)? "." <UNSIGNED_INTEGER>  ( ["E","e"] <INTEGER> )? >
|   < INTEGER           : (<SIGN>)? <UNSIGNED_INTEGER>      >
|   < #UNSIGNED_INTEGER : (<DIGIT>)+                        >
|   < DIGIT             : ["0"-"9"]                         >
|   < #SIGN             : ["+","-"]                         >
}

TOKEN: /* infinities and NaN */
{
    < POS_INF           : "+inf.0" >
|   < NEG_INF           : "-inf.0" >
|   < NAN               : "+nan.0" >
}

TOKEN : /* identifier */
{
  < IDENTIFIER : ( <SUBSEQUENT> )+ >
| < #INITIAL : <LETTER> | <GREEK> | <SPECIAL_INITIAL> >
| < #LETTER : ["a"-"z","A"-"Z"] >
| < #GREEK : ["\u0391"-"\u03A9","\u03B1"-"\u03C9"] >
| < #SPECIAL_INITIAL : ["+","-","$","%","&","*","/","<","=",">","?","^","_","~", "|","#"] >
| < #SPECIAL_SUBSEQUENT : [".","!",":"] >
| < #SUBSEQUENT : <INITIAL> | <DIGIT> | <SPECIAL_SUBSEQUENT> >
}

TOKEN :
{
   < START_STRING : "\"" > : IN_STRING
}

<IN_STRING> TOKEN :
{
  < START_INTERPOLATION : "#(" > : DEFAULT
| < TRAILING_HASH : "#" >
| < STRING_CONTENT : ( <STRING_ELEMENT> | <ALLOW> | <ESCAPED> )+ >
| < #ALLOW : "\\#(" | "#" <ESCAPED> | "#" ~["(","\"","\\"]   >
| < #ESCAPED : "\\" ["\"","\\", "n", "r", "t"] >
| < #STRING_ELEMENT : ~["\"","\\", "#"] >
| < END_STRING : "\"" > : DEFAULT
}

TOKEN : /* characters */
{
  < CHARACTER            : <SINGLE_CHARACTER> | <TAB_CHARACTER> | <RETURN_CHARACTER> | <SPACE_CHARACTER> | <NEWLINE_CHARACTER> | <NULL_CHARACTER> | <ASCII_CHARACTER> | <UNICODE_CHARACTER> >
| < #SINGLE_CHARACTER    : "#\\" (<SUBSEQUENT> | ["A"-"Z"] | [",","?","'","\"","\\","`",";","#","(",")","[","]","{","}"," ","@"])  >
| < #NEWLINE_CHARACTER   : "#\\newline"                                                       >
| < #TAB_CHARACTER       : "#\\tab"                                                           >
| < #SPACE_CHARACTER     : "#\\space"                                                         >
| < #RETURN_CHARACTER    : "#\\return"                                                        >
| < #NULL_CHARACTER      : "#\\null"                                                          >
| < #ASCII_CHARACTER     : "#\\" <DIGIT> (<DIGIT>)+                                           >
| < #UNICODE_CHARACTER   : "#\\" ["u", "U"] (["0"-"9", "a"-"f", "A"-"F"])+                    >
}

SKIP : /* comment */
{
  < COMMENT : ";" (~["\n"])* "\n" >
}

ArcObject parseOneLine():     { ArcObject x; } {
    x=expression()            { return x;    }
  | <EOF>                     { return null; }
}

ArcObject expression():       { ArcObject o; } {
  (
    o = list()
  | o = atom()
  | o = quote()
  | o = unQuote()
  | o = unQuoteSplicing()
  | o = quasiQuote()
  | o = functionShortcut()
  )                           { return o; }
}

ArcObject quote():            { Token tok; ArcObject o; } {
  tok = "'"
  o = expression()            { return Pair.buildFrom(Symbol.mkSym("quote"), o); }
}

ArcObject unQuote():          { Token tok; ArcObject o; } {
  tok = ","
  o = expression()            { return Pair.buildFrom(Symbol.mkSym("unquote"), o); }
}

ArcObject unQuoteSplicing():  { Token tok; ArcObject o; } {
  tok = ",@"
  o = expression()            { return Pair.buildFrom(Symbol.mkSym("unquote-splicing"), o); }
}

ArcObject quasiQuote():       { Token tok; ArcObject o; } {
  tok = "`"
  o = expression()            { return Pair.buildFrom(Symbol.mkSym("quasiquote"), o); }
}

ArcObject functionShortcut(): {
                                Token tok;
                                List list = new LinkedList();
                                List fn = new LinkedList();
                                fn.add(Symbol.mkSym("fn"));
                                fn.add(Pair.buildFrom(Symbol.mkSym("_")));
                                ArcObject o;
                              } {
  tok = "[" (
  o = expression()            { list.add(o); }
  )+ "]"                      {
                                fn.add(Pair.buildFrom(list));
                                return Pair.buildFrom(fn);
                              }
}

ArcObject list():             {
                                Token start;
                                ArcObject item;
                                ArcObject last = ArcObject.NIL;
                                List<ArcObject> list = new LinkedList();
                              } {
  start = "("
    ( LOOKAHEAD(2)
      item = expression()     { list.add(item);                                           }
    )*
  ")"                         {
                                if (list.size() > 0) {
                                  return Pair.parse(list);
                                } else if (last != ArcObject.NIL) {
                                  generateParseException();
                                } else {
                                  return ArcObject.EMPTY_LIST;
                                }
                              }
}

ArcObject string():           {
                                Token s;
                                Token hash = null;
                                ArcObject o;
                                List result = new ArrayList();
                                String fragment;
                              } {
  <START_STRING>
  (
    s=<STRING_CONTENT>
    ( hash = <TRAILING_HASH> )?
                              {
                                fragment = s.toString();
                                if (hash != null) {
                                  fragment += "#";
                                }
                                result.add(ArcString.make(cleanString(fragment)));
                              }
  | s=<START_INTERPOLATION>
    o=expression()            { result.add(o); }
    s=")"                     {
                                this.token_source.SwitchTo(ArcParser.IN_STRING);
                              }
  )*
  <END_STRING>                {
                                if (result.size() == 0) {
                                  return ArcString.make("");
                                } else if (result.size() == 1) {
                                  return (ArcObject)result.get(0);
                                } else {
                                  List interpolated = new ArrayList(result.size() + 1);
                                  interpolated.add(Symbol.make("string"));
                                  interpolated.addAll(result);
                                  return Pair.buildFrom(interpolated);
                                }
                              }
}

ArcObject atom():             { Token s; ArcObject o; } {
  ( s=<COMPLEX>               { return Complex.parse(s.toString());                     }
  | s=<INTEGER>               { return Rational.make(Long.parseLong(s.toString()), 1);  }
  | s=<DOUBLE>                { return Real.parse(s.toString());                        }
  | s=<POS_INF>               { return Real.positiveInfinity();                         }
  | s=<NEG_INF>               { return Real.negativeInfinity();                         }
  | s=<NAN>                   { return Real.nan();                                      }
  | s=<FRACTION>              { return Rational.parse(s.toString());                    }
  | o=string()                { return o;                                               }
  | s=<IDENTIFIER>            { return Symbol.make(s.toString());                       }
  | s=<CHARACTER>             { return ArcCharacter.make(s.toString());                 }
  )
}
